import { NgZone, InjectionToken } from '@angular/core';
import { Observable, OperatorFunction, MonoTypeOperatorFunction } from 'rxjs';
import { ɵPromiseProxy, FirebaseAppConfig, FirebaseOptions } from '@angular/fire';
import { remoteConfig } from 'firebase/app';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export interface ConfigTemplate {
    [key: string]: string | number | boolean;
}
export declare const SETTINGS: InjectionToken<remoteConfig.Settings>;
export declare const DEFAULTS: InjectionToken<ConfigTemplate>;
export interface AngularFireRemoteConfig extends ɵPromiseProxy<remoteConfig.RemoteConfig> {
}
export declare class Value implements remoteConfig.Value {
    _source: remoteConfig.ValueSource;
    _value: string;
    asBoolean(): boolean;
    asString(): string;
    asNumber(): number;
    getSource(): remoteConfig.ValueSource;
    constructor(_source: remoteConfig.ValueSource, _value: string);
}
export declare class Parameter extends Value {
    key: string;
    fetchTimeMillis: number;
    constructor(key: string, fetchTimeMillis: number, source: remoteConfig.ValueSource, value: string);
}
export declare const filterRemote: () => MonoTypeOperatorFunction<Parameter | Parameter[]>;
export declare const filterFresh: (howRecentInMillis: number) => MonoTypeOperatorFunction<Parameter | Parameter[]>;
export declare class AngularFireRemoteConfig {
    private zone;
    readonly changes: Observable<Parameter>;
    readonly parameters: Observable<Parameter[]>;
    readonly numbers: Observable<{
        [key: string]: number | undefined;
    }> & {
        [key: string]: Observable<number>;
    };
    readonly booleans: Observable<{
        [key: string]: boolean | undefined;
    }> & {
        [key: string]: Observable<boolean>;
    };
    readonly strings: Observable<{
        [key: string]: string | undefined;
    }> & {
        [key: string]: Observable<string | undefined>;
    };
    constructor(options: FirebaseOptions, nameOrConfig: string | FirebaseAppConfig | null | undefined, settings: remoteConfig.Settings | null, defaultConfig: ConfigTemplate | null, zone: NgZone, platformId: Object);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularFireRemoteConfig, [null, { optional: true; }, { optional: true; }, { optional: true; }, null, null]>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularFireRemoteConfig, [null, { optional: true; }, { optional: true; }, { optional: true; }, null, null]>;
}
export declare const budget: <T>(interval: number) => MonoTypeOperatorFunction<T>;
export declare function scanToObject(): OperatorFunction<Parameter, {
    [key: string]: string | undefined;
}>;
export declare function scanToObject(to: 'numbers'): OperatorFunction<Parameter, {
    [key: string]: number | undefined;
}>;
export declare function scanToObject(to: 'booleans'): OperatorFunction<Parameter, {
    [key: string]: boolean | undefined;
}>;
export declare function scanToObject(to: 'strings'): OperatorFunction<Parameter, {
    [key: string]: string | undefined;
}>;
export declare function scanToObject<T extends ConfigTemplate>(template: T): OperatorFunction<Parameter, T & {
    [key: string]: string | undefined;
}>;
export declare function mapToObject(): OperatorFunction<Parameter[], {
    [key: string]: string | undefined;
}>;
export declare function mapToObject(to: 'numbers'): OperatorFunction<Parameter[], {
    [key: string]: number | undefined;
}>;
export declare function mapToObject(to: 'booleans'): OperatorFunction<Parameter[], {
    [key: string]: boolean | undefined;
}>;
export declare function mapToObject(to: 'strings'): OperatorFunction<Parameter[], {
    [key: string]: string | undefined;
}>;
export declare function mapToObject<T extends ConfigTemplate>(template: T): OperatorFunction<Parameter[], T & {
    [key: string]: string | undefined;
}>;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3RlLWNvbmZpZy5kLnRzIiwic291cmNlcyI6WyJyZW1vdGUtY29uZmlnLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUE3RUEsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ1pvbmUsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBPcGVyYXRvckZ1bmN0aW9uLCBNb25vVHlwZU9wZXJhdG9yRnVuY3Rpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IMm1UHJvbWlzZVByb3h5LCBGaXJlYmFzZUFwcENvbmZpZywgRmlyZWJhc2VPcHRpb25zIH0gZnJvbSAnQGFuZ3VsYXIvZmlyZSc7XG5pbXBvcnQgeyByZW1vdGVDb25maWcgfSBmcm9tICdmaXJlYmFzZS9hcHAnO1xuZXhwb3J0IGludGVyZmFjZSBDb25maWdUZW1wbGF0ZSB7XG4gICAgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbjtcbn1cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFNFVFRJTkdTOiBJbmplY3Rpb25Ub2tlbjxyZW1vdGVDb25maWcuU2V0dGluZ3M+O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgREVGQVVMVFM6IEluamVjdGlvblRva2VuPENvbmZpZ1RlbXBsYXRlPjtcbmV4cG9ydCBpbnRlcmZhY2UgQW5ndWxhckZpcmVSZW1vdGVDb25maWcgZXh0ZW5kcyDJtVByb21pc2VQcm94eTxyZW1vdGVDb25maWcuUmVtb3RlQ29uZmlnPiB7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBWYWx1ZSBpbXBsZW1lbnRzIHJlbW90ZUNvbmZpZy5WYWx1ZSB7XG4gICAgX3NvdXJjZTogcmVtb3RlQ29uZmlnLlZhbHVlU291cmNlO1xuICAgIF92YWx1ZTogc3RyaW5nO1xuICAgIGFzQm9vbGVhbigpOiBib29sZWFuO1xuICAgIGFzU3RyaW5nKCk6IHN0cmluZztcbiAgICBhc051bWJlcigpOiBudW1iZXI7XG4gICAgZ2V0U291cmNlKCk6IHJlbW90ZUNvbmZpZy5WYWx1ZVNvdXJjZTtcbiAgICBjb25zdHJ1Y3Rvcihfc291cmNlOiByZW1vdGVDb25maWcuVmFsdWVTb3VyY2UsIF92YWx1ZTogc3RyaW5nKTtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBhcmFtZXRlciBleHRlbmRzIFZhbHVlIHtcbiAgICBrZXk6IHN0cmluZztcbiAgICBmZXRjaFRpbWVNaWxsaXM6IG51bWJlcjtcbiAgICBjb25zdHJ1Y3RvcihrZXk6IHN0cmluZywgZmV0Y2hUaW1lTWlsbGlzOiBudW1iZXIsIHNvdXJjZTogcmVtb3RlQ29uZmlnLlZhbHVlU291cmNlLCB2YWx1ZTogc3RyaW5nKTtcbn1cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGZpbHRlclJlbW90ZTogKCkgPT4gTW9ub1R5cGVPcGVyYXRvckZ1bmN0aW9uPFBhcmFtZXRlciB8IFBhcmFtZXRlcltdPjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGZpbHRlckZyZXNoOiAoaG93UmVjZW50SW5NaWxsaXM6IG51bWJlcikgPT4gTW9ub1R5cGVPcGVyYXRvckZ1bmN0aW9uPFBhcmFtZXRlciB8IFBhcmFtZXRlcltdPjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFuZ3VsYXJGaXJlUmVtb3RlQ29uZmlnIHtcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgcmVhZG9ubHkgY2hhbmdlczogT2JzZXJ2YWJsZTxQYXJhbWV0ZXI+O1xuICAgIHJlYWRvbmx5IHBhcmFtZXRlcnM6IE9ic2VydmFibGU8UGFyYW1ldGVyW10+O1xuICAgIHJlYWRvbmx5IG51bWJlcnM6IE9ic2VydmFibGU8e1xuICAgICAgICBba2V5OiBzdHJpbmddOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgfT4gJiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IE9ic2VydmFibGU8bnVtYmVyPjtcbiAgICB9O1xuICAgIHJlYWRvbmx5IGJvb2xlYW5zOiBPYnNlcnZhYmxlPHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgICB9PiAmIHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgICB9O1xuICAgIHJlYWRvbmx5IHN0cmluZ3M6IE9ic2VydmFibGU8e1xuICAgICAgICBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgfT4gJiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IE9ic2VydmFibGU8c3RyaW5nIHwgdW5kZWZpbmVkPjtcbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEZpcmViYXNlT3B0aW9ucywgbmFtZU9yQ29uZmlnOiBzdHJpbmcgfCBGaXJlYmFzZUFwcENvbmZpZyB8IG51bGwgfCB1bmRlZmluZWQsIHNldHRpbmdzOiByZW1vdGVDb25maWcuU2V0dGluZ3MgfCBudWxsLCBkZWZhdWx0Q29uZmlnOiBDb25maWdUZW1wbGF0ZSB8IG51bGwsIHpvbmU6IE5nWm9uZSwgcGxhdGZvcm1JZDogT2JqZWN0KTtcbn1cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGJ1ZGdldDogPFQ+KGludGVydmFsOiBudW1iZXIpID0+IE1vbm9UeXBlT3BlcmF0b3JGdW5jdGlvbjxUPjtcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIHNjYW5Ub09iamVjdCgpOiBPcGVyYXRvckZ1bmN0aW9uPFBhcmFtZXRlciwge1xuICAgIFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHVuZGVmaW5lZDtcbn0+O1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gc2NhblRvT2JqZWN0KHRvOiAnbnVtYmVycycpOiBPcGVyYXRvckZ1bmN0aW9uPFBhcmFtZXRlciwge1xuICAgIFtrZXk6IHN0cmluZ106IG51bWJlciB8IHVuZGVmaW5lZDtcbn0+O1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gc2NhblRvT2JqZWN0KHRvOiAnYm9vbGVhbnMnKTogT3BlcmF0b3JGdW5jdGlvbjxQYXJhbWV0ZXIsIHtcbiAgICBba2V5OiBzdHJpbmddOiBib29sZWFuIHwgdW5kZWZpbmVkO1xufT47XG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBzY2FuVG9PYmplY3QodG86ICdzdHJpbmdzJyk6IE9wZXJhdG9yRnVuY3Rpb248UGFyYW1ldGVyLCB7XG4gICAgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgdW5kZWZpbmVkO1xufT47XG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBzY2FuVG9PYmplY3Q8VCBleHRlbmRzIENvbmZpZ1RlbXBsYXRlPih0ZW1wbGF0ZTogVCk6IE9wZXJhdG9yRnVuY3Rpb248UGFyYW1ldGVyLCBUICYge1xuICAgIFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHVuZGVmaW5lZDtcbn0+O1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gbWFwVG9PYmplY3QoKTogT3BlcmF0b3JGdW5jdGlvbjxQYXJhbWV0ZXJbXSwge1xuICAgIFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHVuZGVmaW5lZDtcbn0+O1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gbWFwVG9PYmplY3QodG86ICdudW1iZXJzJyk6IE9wZXJhdG9yRnVuY3Rpb248UGFyYW1ldGVyW10sIHtcbiAgICBba2V5OiBzdHJpbmddOiBudW1iZXIgfCB1bmRlZmluZWQ7XG59PjtcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIG1hcFRvT2JqZWN0KHRvOiAnYm9vbGVhbnMnKTogT3BlcmF0b3JGdW5jdGlvbjxQYXJhbWV0ZXJbXSwge1xuICAgIFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG59PjtcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIG1hcFRvT2JqZWN0KHRvOiAnc3RyaW5ncycpOiBPcGVyYXRvckZ1bmN0aW9uPFBhcmFtZXRlcltdLCB7XG4gICAgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgdW5kZWZpbmVkO1xufT47XG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBtYXBUb09iamVjdDxUIGV4dGVuZHMgQ29uZmlnVGVtcGxhdGU+KHRlbXBsYXRlOiBUKTogT3BlcmF0b3JGdW5jdGlvbjxQYXJhbWV0ZXJbXSwgVCAmIHtcbiAgICBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG59PjtcbiJdfQ==