import { InjectionToken, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { FirebaseOptions, FirebaseAppConfig, ɵAngularFireSchedulers } from '@angular/fire';
import { UploadMetadata } from './interfaces';
import { storage } from 'firebase/app';
import 'firebase/storage';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare const BUCKET: InjectionToken<string>;
/**
 * AngularFireStorage Service
 *
 * This service is the main entry point for this feature module. It provides
 * an API for uploading and downloading binary files from Cloud Storage for
 * Firebase.
 */
export declare class AngularFireStorage {
    readonly storage: storage.Storage;
    readonly keepUnstableUntilFirst: <T>(obs: Observable<T>) => Observable<T>;
    readonly schedulers: ɵAngularFireSchedulers;
    constructor(options: FirebaseOptions, nameOrConfig: string | FirebaseAppConfig | null | undefined, storageBucket: string | null, platformId: Object, zone: NgZone);
    ref(path: string): import("./ref").AngularFireStorageReference;
    upload(path: string, data: any, metadata?: UploadMetadata): import("./task").AngularFireUploadTask;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularFireStorage, [null, { optional: true; }, { optional: true; }, null, null]>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularFireStorage, [null, { optional: true; }, { optional: true; }, null, null]>;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS5kLnRzIiwic291cmNlcyI6WyJzdG9yYWdlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFyQkEsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBGaXJlYmFzZU9wdGlvbnMsIEZpcmViYXNlQXBwQ29uZmlnLCDJtUFuZ3VsYXJGaXJlU2NoZWR1bGVycyB9IGZyb20gJ0Bhbmd1bGFyL2ZpcmUnO1xuaW1wb3J0IHsgVXBsb2FkTWV0YWRhdGEgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgc3RvcmFnZSB9IGZyb20gJ2ZpcmViYXNlL2FwcCc7XG5pbXBvcnQgJ2ZpcmViYXNlL3N0b3JhZ2UnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgQlVDS0VUOiBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+O1xuLyoqXG4gKiBBbmd1bGFyRmlyZVN0b3JhZ2UgU2VydmljZVxuICpcbiAqIFRoaXMgc2VydmljZSBpcyB0aGUgbWFpbiBlbnRyeSBwb2ludCBmb3IgdGhpcyBmZWF0dXJlIG1vZHVsZS4gSXQgcHJvdmlkZXNcbiAqIGFuIEFQSSBmb3IgdXBsb2FkaW5nIGFuZCBkb3dubG9hZGluZyBiaW5hcnkgZmlsZXMgZnJvbSBDbG91ZCBTdG9yYWdlIGZvclxuICogRmlyZWJhc2UuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFuZ3VsYXJGaXJlU3RvcmFnZSB7XG4gICAgcmVhZG9ubHkgc3RvcmFnZTogc3RvcmFnZS5TdG9yYWdlO1xuICAgIHJlYWRvbmx5IGtlZXBVbnN0YWJsZVVudGlsRmlyc3Q6IDxUPihvYnM6IE9ic2VydmFibGU8VD4pID0+IE9ic2VydmFibGU8VD47XG4gICAgcmVhZG9ubHkgc2NoZWR1bGVyczogybVBbmd1bGFyRmlyZVNjaGVkdWxlcnM7XG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogRmlyZWJhc2VPcHRpb25zLCBuYW1lT3JDb25maWc6IHN0cmluZyB8IEZpcmViYXNlQXBwQ29uZmlnIHwgbnVsbCB8IHVuZGVmaW5lZCwgc3RvcmFnZUJ1Y2tldDogc3RyaW5nIHwgbnVsbCwgcGxhdGZvcm1JZDogT2JqZWN0LCB6b25lOiBOZ1pvbmUpO1xuICAgIHJlZihwYXRoOiBzdHJpbmcpOiBpbXBvcnQoXCIuL3JlZlwiKS5Bbmd1bGFyRmlyZVN0b3JhZ2VSZWZlcmVuY2U7XG4gICAgdXBsb2FkKHBhdGg6IHN0cmluZywgZGF0YTogYW55LCBtZXRhZGF0YT86IFVwbG9hZE1ldGFkYXRhKTogaW1wb3J0KFwiLi90YXNrXCIpLkFuZ3VsYXJGaXJlVXBsb2FkVGFzaztcbn1cbiJdfQ==