import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { FirebaseOptions, FirebaseAppConfig, ɵPromiseProxy } from '@angular/fire';
import { User, auth } from 'firebase/app';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export interface AngularFireAuth extends ɵPromiseProxy<auth.Auth> {
}
export declare class AngularFireAuth {
    /**
     * Observable of authentication state; as of Firebase 4.0 this is only triggered via sign-in/out
     */
    readonly authState: Observable<User | null>;
    /**
     * Observable of the currently signed-in user's JWT token used to identify the user to a Firebase service (or null).
     */
    readonly idToken: Observable<string | null>;
    /**
     * Observable of the currently signed-in user (or null).
     */
    readonly user: Observable<User | null>;
    /**
     * Observable of the currently signed-in user's IdTokenResult object which contains the ID token JWT string and other
     * helper properties for getting different data associated with the token as well as all the decoded payload claims
     * (or null).
     */
    readonly idTokenResult: Observable<auth.IdTokenResult | null>;
    constructor(options: FirebaseOptions, nameOrConfig: string | FirebaseAppConfig | null | undefined, platformId: Object, zone: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularFireAuth, [null, { optional: true; }, null, null]>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularFireAuth, [null, { optional: true; }, null, null]>;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5kLnRzIiwic291cmNlcyI6WyJhdXRoLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBMUJBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRmlyZWJhc2VPcHRpb25zLCBGaXJlYmFzZUFwcENvbmZpZywgybVQcm9taXNlUHJveHkgfSBmcm9tICdAYW5ndWxhci9maXJlJztcbmltcG9ydCB7IFVzZXIsIGF1dGggfSBmcm9tICdmaXJlYmFzZS9hcHAnO1xuZXhwb3J0IGludGVyZmFjZSBBbmd1bGFyRmlyZUF1dGggZXh0ZW5kcyDJtVByb21pc2VQcm94eTxhdXRoLkF1dGg+IHtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFuZ3VsYXJGaXJlQXV0aCB7XG4gICAgLyoqXG4gICAgICogT2JzZXJ2YWJsZSBvZiBhdXRoZW50aWNhdGlvbiBzdGF0ZTsgYXMgb2YgRmlyZWJhc2UgNC4wIHRoaXMgaXMgb25seSB0cmlnZ2VyZWQgdmlhIHNpZ24taW4vb3V0XG4gICAgICovXG4gICAgcmVhZG9ubHkgYXV0aFN0YXRlOiBPYnNlcnZhYmxlPFVzZXIgfCBudWxsPjtcbiAgICAvKipcbiAgICAgKiBPYnNlcnZhYmxlIG9mIHRoZSBjdXJyZW50bHkgc2lnbmVkLWluIHVzZXIncyBKV1QgdG9rZW4gdXNlZCB0byBpZGVudGlmeSB0aGUgdXNlciB0byBhIEZpcmViYXNlIHNlcnZpY2UgKG9yIG51bGwpLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlkVG9rZW46IE9ic2VydmFibGU8c3RyaW5nIHwgbnVsbD47XG4gICAgLyoqXG4gICAgICogT2JzZXJ2YWJsZSBvZiB0aGUgY3VycmVudGx5IHNpZ25lZC1pbiB1c2VyIChvciBudWxsKS5cbiAgICAgKi9cbiAgICByZWFkb25seSB1c2VyOiBPYnNlcnZhYmxlPFVzZXIgfCBudWxsPjtcbiAgICAvKipcbiAgICAgKiBPYnNlcnZhYmxlIG9mIHRoZSBjdXJyZW50bHkgc2lnbmVkLWluIHVzZXIncyBJZFRva2VuUmVzdWx0IG9iamVjdCB3aGljaCBjb250YWlucyB0aGUgSUQgdG9rZW4gSldUIHN0cmluZyBhbmQgb3RoZXJcbiAgICAgKiBoZWxwZXIgcHJvcGVydGllcyBmb3IgZ2V0dGluZyBkaWZmZXJlbnQgZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhlIHRva2VuIGFzIHdlbGwgYXMgYWxsIHRoZSBkZWNvZGVkIHBheWxvYWQgY2xhaW1zXG4gICAgICogKG9yIG51bGwpLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlkVG9rZW5SZXN1bHQ6IE9ic2VydmFibGU8YXV0aC5JZFRva2VuUmVzdWx0IHwgbnVsbD47XG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogRmlyZWJhc2VPcHRpb25zLCBuYW1lT3JDb25maWc6IHN0cmluZyB8IEZpcmViYXNlQXBwQ29uZmlnIHwgbnVsbCB8IHVuZGVmaW5lZCwgcGxhdGZvcm1JZDogT2JqZWN0LCB6b25lOiBOZ1pvbmUpO1xufVxuIl19